Blockchiffre
============

In diesem Kapitel lernst du:
----------------------------

======= ========================================================
Bereich Thema
======= ========================================================
üöÄ       eine Transpositionschiffre implementieren  
‚öô        Listen und Zeichenketten per Slice aufteilen  
üí°       die ``join``-Methode des ``string``-Datentyps verwenden  
üîÄ       eine Schleifenvariable zum Indexieren verwenden  
üîÄ       √ºber Indizes eine Liste neu anordnen  
======= ========================================================


Indexieren und Slicen
---------------------

Strings und Listen sind beide geordnete Folgen von Elementen.  
Bei beiden kannst du Elemente √ºber ihre Position ansprechen.  
Allerdings z√§hlt Python anders als Menschen:

.. figure:: indexing.png
   :alt: Indexierung


Aufgabe 1: Listen indexieren
----------------------------

Was ergibt jeder der folgenden Ausdr√ºcke?

.. code:: python3

   numbers = [1, 4, 9, 16, 25, 36]

   numbers[4]
   movies[0]
   movies[-1]
   numbers[-3]


Aufgabe 2: Zeichenketten slicen
-------------------------------

Was ergibt jeder der folgenden Befehle?

.. code:: python3

   name = "hello world"

   name[5:]
   name[5:10]
   name[:10:2]
   numbers[2:-2]
   numbers[::2]


Aufgabe 3: Serien
-----------------

Nutze ``list(range(start, stop, schrittweite))``, um folgende Listen zu erzeugen:

.. code:: python3

   [4, 7, 9, 12, 15]

   [10, 20, 30, 40, 50, 60]

   [33, 32, 31, 30]


Aufgabe 4: Entschl√ºsseln
-------------------------

Der folgende Text enth√§lt ein verschl√ºsseltes Wort:

.. code:: python3

   name = "CSAIPRALKAINACZEYLVOST"

Gib jeden zweiten Buchstaben aus, beginnend mit dem zweiten.


Aufgabe 5: Slice-R√§tsel
------------------------

Nutze die Ausdr√ºcke, um die Liste wie angegeben zu ver√§ndern.  
Verwende jeden Ausdruck genau einmal.

.. figure:: list_funcs1.png
   :alt: Listenfunktionen √úbung 1


Aufgabe 6: Bl√∂cke
-----------------

Der folgende Code erzeugt die ersten zwei Bl√∂cke f√ºr eine `Transpositionschiffre <https://de.wikipedia.org/wiki/Transpositionsverschl%C3%BCsselung>`__.  
Vervollst√§ndige den Code, indem du auch die restlichen zwei Bl√∂cke erzeugst.

.. code:: python3

   nachricht = "TREFFENMORGENSVORBAHNHOF"

   block1 = nachricht[0::4]
   block2 = nachricht[1::4]
   ___
   ___
   encrypted = block1 + block2 + block3 + block4


Aufgabe 7: Transpositionschiffre
--------------------------------

Vervollst√§ndige das Programm, das einen Text mit einer Transpositionschiffre verschl√ºsselt:

.. code:: python3

   text = input("Gib den Text zum Verschl√ºsseln ein: ")
   crypto = ""
   for start in range(4):
       ___


Aufgabe 8: Entschl√ºsseln
------------------------

Schreibe ein Programm, das eine verschl√ºsselte Nachricht wieder entschl√ºsselt.


Aufgabe 9: Schl√ºssel
--------------------

Nutze einen Schl√ºssel wie ``2031``, der eine neue Reihenfolge der vier Bl√∂cke vorgibt. Implementiere folgendes:

1. Erzeuge eine leere Liste  
2. Erzeuge wie zuvor die vier Bl√∂cke und f√ºge sie der Liste hinzu  
3. Gehe jede Stelle des Schl√ºssels durch  
4. W√§hle aus der Liste den Block mit dem Index entsprechend der Ziffer (in int umwandeln)  
5. F√ºge den Block zum Ergebnisstring hinzu  


Reflexionsfragen
----------------

- Was ist Indexierung?
- Was bewirken die drei Zahlen beim *Slicing*?
- Was h√§ltst du von der Transpositionschiffre? Ist sie sicher?
- Wie k√∂nnte man eine Transpositionschiffre ohne den Schl√ºssel entschl√ºsseln?
